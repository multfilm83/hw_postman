{
	"info": {
		"_postman_id": "6b5fd71b-a51d-40f1-917b-0f5b807b239f",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ep_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"This is the first responce from server!\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your name = Andrey\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Andrey\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your age = 38\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"38\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your salary = 2000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"// Спарсить request.\r",
							"    var requestData = request.data;\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from request = Andrey\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from request = 38\", function()  {\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from request = 2000\", function ()  {\r",
							"    pm.expect(jsonData.salary).to.eql(+requestData.salary);\r",
							"});\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var request = request.data\r",
							"pm.test(\"Salary 1.5 year = salary*4\", function ()  {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// Спарсить request.\r",
							"var request = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Request name = Andrey\", function ()  {\r",
							"    pm.expect(jsonData.name).to.eql(request.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Request age = 38\", function ()  {\r",
							"    pm.expect(jsonData.age).to.eql(request.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary request = 2000\", function ()  {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.salary);\r",
							"});\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have a name\", function ()  {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"})\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have a age\", function ()  {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name = Luky\", function ()  {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"]);\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function ()  {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Andrey&age=38&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json ();\r",
							"// Спарсить request.\r",
							"var request = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Name request = Andrey\", function ()  {\r",
							"    pm.expect(jsonData.name).to.eql(request.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test (\"Request age = 38\", function ()  {\r",
							"    pm.expect(jsonData.age).to.eql(+request.age);\r",
							"});\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(request.salary);\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							" console.log(jsonData.salary[0]);\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Null element salary = 2000\", function()  {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+request.salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"First element salary =2000*2\", function()  {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(request.salary*2);\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Second element salary =2000*3\", function()  {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(request.salary*3);\r",
							"});\r",
							"// Передать в окружение переменные\r",
							"pm.environment.set(\"salary\", request.salary );\r",
							"pm.environment.set(\"name\", request.name);\r",
							"pm.environment.set(\"age\", request.age);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"\tconsole.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andrey&age=38&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json ();\r",
							"// Спарсить request.\r",
							"var requestData = request.data;\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response have a start_qa_salary\", function ()  {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response have a qa_salary_after_6_month\", function ()  {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response have a qa_salary_after_12_month\", function ()  {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response have a qa_salary_after_1.5_year\", function ()  {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response have a qa_salary_after_3.5_year\", function ()  {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json have a person\", function ()  {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start QA salary eql user salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+requestData.salary);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 6 months eql user salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+requestData.salary*2);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 12 months eql user salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 1.5 year eql user salary*3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+requestData.salary*3.3);\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"QA salary after 3.5 year eql user salary*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+requestData.salary*3.8);\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"First element eql salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+requestData.salary);\r",
							"});\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age eql age req\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+requestData.age);\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary after 5 years eql salary*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(requestData.salary*4.2);\r",
							"});\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var i in jsonData.person) {\r",
							"    console.log(i, jsonData.person[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}